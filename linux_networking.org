#+TITLE: /Linux Networking/
#+OPTIONS: toc:nil tasks:nil author:nil email:nil creator:nil tags:nil

* Notes on Linux Networking

** Rami Rosen's Slides
Sources: http://www.haifux.org/lectures/172/netLec.pdf,
http://www.haifux.org/lectures/217/netLec5.pdf

- the linux kernel deals with layers 2 (Ethernet), 3 (IP), 4 (UDP, TCP)
- the two most important data structures are:
1. [[http://lxr.free-electrons.com/source/include/linux/skbuff.h#L626][skbuff]]: contains metadata and packet data
2. [[http://lxr.free-electrons.com/source/include/linux/netdevice.h#L1560][netdevice]]: represents a network device ([[http://www.makelinux.net/ldd3/chp-17-sect-3][field description]])

Rosen references this [[http://jsevy.com/network/Linux_network_stack_walkthrough.html][packet walkthrough]] as prerequisite for his
slides.  Here is [[https://wiki.linuxfoundation.org/images/1/1c/Network_data_flow_through_kernel.png][another view]] from the Linux Foundation.

- routing table and cache enable us to find the net device and address
  to which a packet will be sent
- implemented by ~struct fib_table~

*** Netlink Sockets
Netlink sockets are a form of IPC that allows communication between a
user process and the kernel.  ~ioctl()~ communication is similar, but
it does not permit asynchronous messaging from the kernel while
netlink sockets do.  Here is an [[http://stackoverflow.com/questions/3299386/how-to-use-netlink-socket-to-communicate-with-a-kernel-module?rq=1][example]] useage.

